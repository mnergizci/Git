##Hello this .txt file includes the some information about how I can make a structure for my python study to put in github.com
#Generally, I am creating  module_lib.py and main_code.py to run my python codes in same home directory and it getting anoying when
#I jump another study or create new thing. It is exactly what a beginner/intermediate coder do this.

##So I decided to spend my a couple of day to find out some useful tips how I can create the a professional study folder for my code to put in
##github repo and share people, also not confused when I visit the codes after couple of time. This

##The notes generally taken from youtube, googling and AI (ChatGPT): I have putted the relavant link when I refer the document source.

##Let's start!:

your_project/
│
├── bin/                # Executable scripts
│   └── your_script.py
│
├── lib/           # Your main library code
│   ├── __init__.py
│   └── your_module.py
│
├── data/               # Your datasets
│   └── dataset.csv
│
├── tests/              # Test scripts
│   ├── __init__.py
│   └── test_your_module.py
│
├── docs/               # Documentation
│   └── index.md
│
├── examples/           # Example scripts
│   └── example_usage.py
│
├── .gitignore          # Git ignore file
├── LICENSE             # License file
├── README.md           # Project description
├── requirements.txt    # Dependencies
├── setup.py            # Installation script
└── pyproject.toml      # Build system configuration (optional)


1. 'bin/'
    -Purpose: Contains the executable scripts that users can run.
    -Example: Scripts that demonstrate how to use your library or perform specific tasks.

2. 'lib/'
    -Purpose: Contains the main library code.
    -Example: The core functionality of the project.

3. 'data/'
    -Purpose: Stores datasets or any data files used by the project.

4. 'tests/'
    -Purpose: Contaions unit tests and other test script.

5. 'docs'
    -Purpose: Documentation for the project and its documentation

6. 'examples'
    -Purpose: Contains example scripts demonstrating how to use the library

7. '.gitignore'
    -Purpose: Specifies files and directories to be ignored by Git.



##There is a couple of way to defining your 'source_path' to includes directories like 'bin' and Python libraries in a terminal.
    - This can be achieved by modifiying the PYTHONPATH environment variable. This ensures that Python can find and import modules
    from these directories.
        --->$ export PYTHONPATH =$PYTHONPATH:/path/to/your_project/bin:/path/to/your_project/your_lib
    - To verify the that the `PYTHONPATH` has been set correctly, echo can be used in the terminal:
        --->$ echo $PYTHONPATH

## To make this change permanent (because it is so common to forget) you can add the command to shell's startup file.
## The startup file in bash is ~/.bashrc or ~/.bash_profile, so please run the source ~/.bashrc afterwards.

######Python Executable python file with

#In the terminal the run the code in anywhere without prefixing with python. 
    -Add a shebang line to script
        #!/usr/bin/env pythons
    -Make the script executable
        chmod +x path/to/python.py
    -Add the script file to $PYTHONPATH