###Muhammet Nergizci, PhD researcher University of Leeds
06/06/24

##Hello I just to get over the git/github in terminal/VScode to store my project professionally in github in order to reach both remote and local terminal.

##This .txt file summarize the what I learn git/github on Youtube. You can refer the video https://www.youtube.com/watch?v=tRZGeaHPoaw&t=536s

## First thing in a terminal please define configuration:
1. git config --global user.name="[mnergiz]"
2. git config --global user.mail="[mailadress@.com]"

##secondly you can also define the default branch name which is generally as called 'main'
3. git config --global init.default branch main

##If you confused the you can use -h flag to see documentation, or git help config to open a webpage regarding the command which includes relative information.
4. git config -g, git help config --global

# Please initialize the repository by init! so It creates .git for necesarry repository file. 
5. git init 

##Then, you can check the status by using git status. This helps you to see the current commits to you. 
6. git status

## You can the track and untrack the files/folder using the add function. It goes the staging environment from working env
7. git add $file_name, (put . to take all files) , to remove git rm --cached $file_name

## You can create .gitignore to add unwanted files inside.

## So, I add some files and played with it so I can commit it by commit function. This saves the change in your history box as your commit and you can travel in time to visit your previos code. That sounds like I use a time machine to travel in time!. It goes the commit environment from stage env
8. git commit -m 'this is my first commit'


###This is really good information for the git to get over again:
In git we have three  environment:
1. Working files ##Editing the files, folders 
2. Staging  ## Holding a pen until to save it in history book (Great explanation from Kevin Stratvert https://www.youtube.com/watch?v=tRZGeaHPoaw&t=536s) 
3. Commit ##The history book you taken note already so you can refer previous version of your current code to check out. Fascinating.
###

##You can use the restore function to remove the file in the stage environment. Stage to working.
9. git restore --staged index.htm 
##to unstaged the data you change you can use git reset
9.1. git reset
9.2. git reset HEAD~1 or ID of in (git log)

## If you would like to skip the stage env and directly commit the your working files you can use -a flag as below:
10. git commit -a -m 'without staging!'

## One of the best thing in git, you can remove or move the file using same bash commands, rm and mv respectively. So If you would like to take back the data you remove you can use git restore again! So it is really amazing aspect if you make a fail!

###When you would like to see the history of what you do so far, you can use log function. It will you give the all history you write
11. git log 
12. git log --oneline # this give you history with the history id. 

##When you feel need to change the commit title in the history you can use the :
13. git commit - 'here is new explanation regarding last commit' --ammend

###there is git rebase -i --root, I can handle this later! It looks a bit advance. I can

####So far, We worked in the main branch. We can also create a new branch for our study. It is a good option if you work in a group study or improve a code which is already written someone. So you can play with the code individualy in another branch.

14. git branch $newnameofbranch
14.1 git checkout -b $newnameofbranch ##also can be used to create new branch
15. git branch ##you can check the branchs
16. git switch $branchname ##move branch you want switch

##Why is branching is important? Bcz imagine I have played a lot of data and dataset, sometimes I would like to change parameter and creating a lot of different version of the dataset like .final, .latesst, .busonolsun, etc. Thanks to branching I can create different version of branch and play with the parameters. If you want to keep the parameter which I like I can merge with the main repo, then continue my main repo to improve the code/study.

17. git switch main #go to main to call the branch
17. git merge -m 'merge main with $branchIfeelinlove' $branchIfellinlove

### afterward you can get rid of the old branch you have already merged the main to make it structure the easier.
18. git branch -d $branchIwanttobreakup



###What happend a conflict between main and branch? Actually the git inform you about the conflict and you can choose the which is the best in the current situation. That is really amazing aspect to work in different version of your dataset and work with other colliegues in together.
19. git switch -c $brachnew




#####So Let's discuss about github as well.

When you create a repo in Github, probably you see a screen give you a recipe how to push a existing repo to github.

1. git remote add origin $htpps:link_of_repo_in_github
2. git branch -M maintainer
3. git push -u origin main

##You already familiear with the code above.
4. git push --all # it helps you push your all branch to github.

### So as you know you can edit the file in the github directly.
### One of the best thing in the github you can use the issue section to put some error, debug and task. People also can visit there to add some question. This is really good to keep your notes in history and mind.



 ### After step 19. You played your files in github and take some pull request from other people. So the files is updated in the github and the files in local is old version.
 ### You can use the git fetch amd git merge to keep the update your local according to remote repository!
20. git fetch
21. git merge
22. git pull ## you can use the git pull directly as well without runnig two seperate command!

###to compare to brach you can you diff function to see the difference between two different branches
23. git diff $branchyouarein






###SSH key a pain in jasmin terminal, so I decided to move my data in local then make revision in local then pull from jasmin. I guess it is best way so far?

###git remove here with git reset